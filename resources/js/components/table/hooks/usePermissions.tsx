import { usePage } from '@inertiajs/react'
import { useMemo } from 'react'

/**
 * Dados de permiss√µes vindos do Laravel via Inertia.js
 */
export interface PermissionsData {
  user_permissions: string[]
  user_roles: string[]
  is_super_admin: boolean
  [key: string]: any
}

/**
 * Props da p√°gina Inertia.js que incluem permiss√µes
 */
interface InertiaPageProps {
  auth?: {
    user?: {
      id: number
      name: string
      email: string
      [key: string]: any
    }
  }
  permissions?: PermissionsData
  [key: string]: any
}

/**
 * Resultado do hook usePermissions
 */
export interface UsePermissionsReturn {
  // Fun√ß√µes de valida√ß√£o
  hasPermission: (permission: string | string[]) => boolean
  hasAnyPermission: (permissions: string[]) => boolean
  hasAllPermissions: (permissions: string[]) => boolean
  hasRole: (role: string | string[]) => boolean
  hasAnyRole: (roles: string[]) => boolean
  hasAllRoles: (roles: string[]) => boolean
  
  // Dados do usu√°rio
  userPermissions: string[]
  userRoles: string[]
  isSuperAdmin: boolean
  isAuthenticated: boolean
  user: any | null
  
  // Fun√ß√µes utilit√°rias
  can: (permission: string | string[]) => boolean
  cannot: (permission: string | string[]) => boolean
  is: (role: string | string[]) => boolean
  isNot: (role: string | string[]) => boolean
  
  // Debug e informa√ß√µes
  permissionsCount: number
  rolesCount: number
  debugInfo: () => void
}

/**
 * Hook para gerenciamento de permiss√µes integrado com Laravel/Spatie
 * 
 * Este hook acessa as permiss√µes do usu√°rio vindas do backend Laravel
 * via Inertia.js props e fornece fun√ß√µes de valida√ß√£o convenientes.
 * 
 * @returns Objeto com fun√ß√µes de valida√ß√£o e dados do usu√°rio
 */
export const usePermissions = (): UsePermissionsReturn => {
  // Acessar dados da p√°gina Inertia.js
  const { props } = usePage<InertiaPageProps>()
  
  // Extrair dados de permiss√µes e autentica√ß√£o
  const permissionsData = props.permissions
  const authData = props.auth
  const user = authData?.user || null
  
  // Dados de permiss√µes com fallbacks seguros
  const userPermissions = useMemo(() => {
    return permissionsData?.user_permissions || []
  }, [permissionsData?.user_permissions])
  
  const userRoles = useMemo(() => {
    return permissionsData?.user_roles || []
  }, [permissionsData?.user_roles])
  
  const isSuperAdmin = useMemo(() => {
    return permissionsData?.is_super_admin || false
  }, [permissionsData?.is_super_admin])
  
  const isAuthenticated = useMemo(() => {
    return !!user
  }, [user])
  
  // Fun√ß√£o principal de valida√ß√£o de permiss√£o
  const hasPermission = useMemo(() => {
    return (permission: string | string[]): boolean => {
      // Super admin tem todas as permiss√µes
      if (isSuperAdmin) return true
      
      // Se n√£o est√° autenticado, n√£o tem permiss√µes
      if (!isAuthenticated) return false
      
      // Se n√£o h√° permiss√µes definidas, negar acesso
      if (!userPermissions.length) return false
      
      // Validar permiss√£o √∫nica
      if (typeof permission === 'string') {
        return userPermissions.includes(permission)
      }
      
      // Validar array de permiss√µes (OR logic - qualquer uma serve)
      if (Array.isArray(permission)) {
        return permission.some(perm => userPermissions.includes(perm))
      }
      
      return false
    }
  }, [isSuperAdmin, isAuthenticated, userPermissions])
  
  // Validar se tem QUALQUER uma das permiss√µes (OR logic)
  const hasAnyPermission = useMemo(() => {
    return (permissions: string[]): boolean => {
      if (isSuperAdmin) return true
      if (!isAuthenticated || !permissions.length) return false
      
      return permissions.some(permission => userPermissions.includes(permission))
    }
  }, [isSuperAdmin, isAuthenticated, userPermissions])
  
  // Validar se tem TODAS as permiss√µes (AND logic)
  const hasAllPermissions = useMemo(() => {
    return (permissions: string[]): boolean => {
      if (isSuperAdmin) return true
      if (!isAuthenticated || !permissions.length) return false
      
      return permissions.every(permission => userPermissions.includes(permission))
    }
  }, [isSuperAdmin, isAuthenticated, userPermissions])
  
  // Fun√ß√£o principal de valida√ß√£o de role
  const hasRole = useMemo(() => {
    return (role: string | string[]): boolean => {
      // Super admin tem todas as roles
      if (isSuperAdmin) return true
      
      // Se n√£o est√° autenticado, n√£o tem roles
      if (!isAuthenticated) return false
      
      // Se n√£o h√° roles definidas, negar acesso
      if (!userRoles.length) return false
      
      // Validar role √∫nica
      if (typeof role === 'string') {
        return userRoles.includes(role)
      }
      
      // Validar array de roles (OR logic - qualquer uma serve)
      if (Array.isArray(role)) {
        return role.some(r => userRoles.includes(r))
      }
      
      return false
    }
  }, [isSuperAdmin, isAuthenticated, userRoles])
  
  // Validar se tem QUALQUER uma das roles (OR logic)
  const hasAnyRole = useMemo(() => {
    return (roles: string[]): boolean => {
      if (isSuperAdmin) return true
      if (!isAuthenticated || !roles.length) return false
      
      return roles.some(role => userRoles.includes(role))
    }
  }, [isSuperAdmin, isAuthenticated, userRoles])
  
  // Validar se tem TODAS as roles (AND logic)
  const hasAllRoles = useMemo(() => {
    return (roles: string[]): boolean => {
      if (isSuperAdmin) return true
      if (!isAuthenticated || !roles.length) return false
      
      return roles.every(role => userRoles.includes(role))
    }
  }, [isSuperAdmin, isAuthenticated, userRoles])
  
  // Aliases convenientes
  const can = hasPermission
  const cannot = useMemo(() => {
    return (permission: string | string[]): boolean => !hasPermission(permission)
  }, [hasPermission])
  
  const is = hasRole
  const isNot = useMemo(() => {
    return (role: string | string[]): boolean => !hasRole(role)
  }, [hasRole])
  
  // Informa√ß√µes de debug
  const debugInfo = useMemo(() => {
    return (): void => {
      console.group('üîê Papa Leguas Permissions Debug')
      console.log('üë§ Usu√°rio:', user)
      console.log('üîë Autenticado:', isAuthenticated)
      console.log('‚≠ê Super Admin:', isSuperAdmin)
      console.log('üìã Permiss√µes:', userPermissions)
      console.log('üé≠ Roles:', userRoles)
      console.log('üìä Contadores:', {
        permiss√µes: userPermissions.length,
        roles: userRoles.length
      })
      console.log('üîç Props Inertia:', props)
      console.groupEnd()
    }
  }, [user, isAuthenticated, isSuperAdmin, userPermissions, userRoles, props])
  
  return {
    // Fun√ß√µes de valida√ß√£o
    hasPermission,
    hasAnyPermission,
    hasAllPermissions,
    hasRole,
    hasAnyRole,
    hasAllRoles,
    
    // Dados do usu√°rio
    userPermissions,
    userRoles,
    isSuperAdmin,
    isAuthenticated,
    user,
    
    // Aliases convenientes
    can,
    cannot,
    is,
    isNot,
    
    // Informa√ß√µes √∫teis
    permissionsCount: userPermissions.length,
    rolesCount: userRoles.length,
    debugInfo
  }
}

/**
 * Hook simplificado para valida√ß√£o r√°pida de permiss√£o
 * 
 * @param permission - Permiss√£o ou array de permiss√µes para validar
 * @returns boolean indicando se o usu√°rio tem a permiss√£o
 */
export const useCan = (permission: string | string[]): boolean => {
  const { hasPermission } = usePermissions()
  return hasPermission(permission)
}

/**
 * Hook simplificado para valida√ß√£o r√°pida de role
 * 
 * @param role - Role ou array de roles para validar
 * @returns boolean indicando se o usu√°rio tem a role
 */
export const useIs = (role: string | string[]): boolean => {
  const { hasRole } = usePermissions()
  return hasRole(role)
}

/**
 * Hook para verificar se usu√°rio √© super admin
 * 
 * @returns boolean indicando se √© super admin
 */
export const useIsSuperAdmin = (): boolean => {
  const { isSuperAdmin } = usePermissions()
  return isSuperAdmin
}

/**
 * Hook para verificar se usu√°rio est√° autenticado
 * 
 * @returns boolean indicando se est√° autenticado
 */
export const useIsAuthenticated = (): boolean => {
  const { isAuthenticated } = usePermissions()
  return isAuthenticated
}

/**
 * Fun√ß√£o utilit√°ria para validar permiss√µes fora de componentes React
 * 
 * @param permissionsData - Dados de permiss√µes
 * @param permission - Permiss√£o para validar
 * @returns boolean indicando se tem a permiss√£o
 */
export const validatePermission = (
  permissionsData: PermissionsData | undefined,
  permission: string | string[]
): boolean => {
  // Super admin tem todas as permiss√µes
  if (permissionsData?.is_super_admin) return true
  
  // Se n√£o h√° dados de permiss√µes, negar acesso
  if (!permissionsData?.user_permissions?.length) return false
  
  const userPermissions = permissionsData.user_permissions
  
  // Validar permiss√£o √∫nica
  if (typeof permission === 'string') {
    return userPermissions.includes(permission)
  }
  
  // Validar array de permiss√µes (OR logic)
  if (Array.isArray(permission)) {
    return permission.some(perm => userPermissions.includes(perm))
  }
  
  return false
}

/**
 * Fun√ß√£o utilit√°ria para validar roles fora de componentes React
 * 
 * @param permissionsData - Dados de permiss√µes
 * @param role - Role para validar
 * @returns boolean indicando se tem a role
 */
export const validateRole = (
  permissionsData: PermissionsData | undefined,
  role: string | string[]
): boolean => {
  // Super admin tem todas as roles
  if (permissionsData?.is_super_admin) return true
  
  // Se n√£o h√° dados de roles, negar acesso
  if (!permissionsData?.user_roles?.length) return false
  
  const userRoles = permissionsData.user_roles
  
  // Validar role √∫nica
  if (typeof role === 'string') {
    return userRoles.includes(role)
  }
  
  // Validar array de roles (OR logic)
  if (Array.isArray(role)) {
    return role.some(r => userRoles.includes(r))
  }
  
  return false
}

export default usePermissions 